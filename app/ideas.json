[
    {
        "name": "Authentication",
        "context": "",
        "description": "The act of identification"
    },
    {
        "name": "Authorization",
        "context": "",
        "description": "Granting differing levels of authority based on the identity of the user"
    },
    {
        "name": "Chain",
        "context": "functional programming",
        "description": "An iterator that iterators over two iterators"
    },
    {
        "name": "Web Development",
        "context": "",
        "description": "An application that can be accessed over the internet."
    },
    {
        "name": "getElementById",
        "context": "javascript",
        "description": "Returns a Document `Element` object whose `id`  property matches the inputted id.   e.g. ```javascript\nfunction changeColor(newColor) { \nconst elem = document.getElementById(‘para’);\nelem.style.color = newColor; } ```"
    },
    {
        "name": "createSignal",
        "context": "SolidJS",
        "description": "The most basic reactive primitive. They track a single value (any type) that changes over time. It returns a getter and a setter.  e.g. \n```javascript const [count, setCount] = createSignal(0);\n```"
    },
    {
        "name": "createEffect",
        "context": "SolidJS",
        "description": "Creates a new computation that runs the given function in a tracking scope, thus automatically tracking its dependencies and rerunning when a dependency updates.
    },
    {
        "name": "partial ordering",
        "context": "",
        "description": "When comparing elements in a set, a pair of elements will fall into one of the following  a > b,\na = b,\na < b,  a is incomparable to b,"
    },
    {
        "name": "total ordering",
        "context": "",
        "description": "When comparing elements in a set, a pair of elements will fall into one of the following  a > b, a = b, a < b"
    },
    {
        "name": "enumeration (CS)",
        "context": "",
        "description": "todo!"
    },
    {
        "name": "enum syntax (Rust)",
        "context": "",
        "description": "todo!"
    },
    {
        "name": "ingress",
        "context": "",
        "description": "todo!"
    },
    {
        "name": "alb",
        "context": "",
        "description": "todo!"
    },
    {
        "name": "certificates",
        "context": "",
        "description": "todo!"
    },
    {
        "name": "log rocket",
        "context": "",
        "description": "todo!"
    },
    {
        "name": "slope of the tangent line",
        "context": "",
        "description": "the limit of the secant line"
    },
    {
        "name": "The Derivative",
        "context": "",
        "description": "The derivative of f(x) with respect to x is the function $f’(x)$ and is defined as, \n\n$$f'(x) = \\lim_{h \\to 0} \\frac{f(x + h) - f(x)}{h}$$"
    },
    {
        "name": "Tangent Line (laymen)",
        "context": "",
        "description": "Parallel to a function\nIt must to the function at a point"
    },
    {
        "name": "One to Many (uml)",
        "context": "",
        "description": "one —-< many"
    },
    {
        "name": "Many to Many (uml)",
        "context": "",
        "description": "many >—-< many"
    },
    {
        "name": "transaction",
        "context": "",
        "description": ""
    },
    {
        "name": "idempotent",
        "context": "",
        "description": "denoting an element of a set which is unchanged in value when multiplied or otherwise operated on by itself"
    },
    {
        "name": "PUT (HTTP)",
        "context": "",
        "description": "creates a new resource or replaces a representation of the target resource with the request payload. The instruction should consist of the complete representation of the resource."
    },
    {
        "name": "PATCH (HTTP)",
        "context": "",
        "description": "This modifies a resource and isn’t always idempotent. "
    },
    {
        "name": "create table (SQL)",
        "context": "",
        "description": "```sql CREATE TABLE IF NOT EXISTS table (     id              SERIAL PRIMARY KEY,\n    name        VARCHAR(64) NOT NULL UNIQUE\n);\n```"
    },
    {
        "name": "generate uuid (POSTGRES)",
        "context": "",
        "description": "gen_random_uuid()\n"
    },
    {
        "name": "insert values in table (SQL)",
        "context": "",
        "description": "```sql\nINSERT INTO table (id, name)\nVALUES\n                  (1, “name1”),\n                  (2, “name2”)\n```"
    },
    {
        "name": "create postgres container",
        "context": "",
        "description": ""
    },
    {
        "name": "return html from handler (axum)",
        "context": "",
        "description": "```rust\npub async fn html_handler() -> Html<&’static str> {     Html(“<h1>hi</h1>”) }\n```"
    },
    {
        "name": "view environment variables (linux)",
        "context": "",
        "description": "~ % printenv\nor\n~ % env\n"
    },
    {
        "name": "create temporary environment variable (linux)",
        "context": "",
        "description": "~ % HI=“hi”\n~ % export HI"
    },
    {
        "name": "create permanent environment (zsh)",
        "context": "",
        "description": "// inside zshrc\nexport TESTENV=‘adding environment to each terminal session’ "
    },
    {
        "name": "view all aliases (linux)",
        "context": "",
        "description": "~ % alias"
    },
    {
        "name": "enter a docker container",
        "context": "",
        "description": "~ % docker container exec"
    },
    {
        "name": "Next Occurrence",
        "context": "",
        "description": "command + d. Fleet hotkey for highlighting next occurrence of highlighted string. "
    },
    {
        "name": "Select All Occurrences",
        "context": "",
        "description": "command + shift + l. Fleet hotkey for highlighting all occurrences of the currently highlighted string. "
    },
    {
        "name": "Open actions dialog",
        "context": "",
        "description": "comment + shift + k. Fleet hotkey"
    },
    {
        "name": "Solid",
        "context": "",
        "description": "A javascript framework for developing interactive web applications."
    },
    {
        "name": "Front End Web Frameworks",
        "context": "",
        "description": "Web frameworks help reduce redundant code by packaging UI elements into reusable components that are normally also reactive.  "
    },
    {
        "name": "What is the entry point of a Solid App?",
        "context": "",
        "description": "The entry point of the application is the render function. It takes in two arguments\na function wrapping our application code\nexisting element in the existing HTML to mount to. "
    },
    {
        "name": "JSX",
        "context": "",
        "description": "An extension to the Javascript language. It provides a way to structure component in JS that looks a lot like HTML. "
    },
    {
        "name": "memo",
        "context": "",
        "description": "A method to ensure a derived value doesn’t refire more than once. "
    },
    {
        "name": "leptos",
        "context": "",
        "description": "todo!"
    },
    {
        "name": "cargo-leptos",
        "context": "",
        "description": "todo!"
    },
    {
        "name": "trunk",
        "context": "",
        "description": "todo!"
    },
    {
        "name": "wasm",
        "context": "",
        "description": "todo!"
    },
    {
        "name": "SSR",
        "context": "",
        "description": "todo!"
    },
    {
        "name": "hydration",
        "context": "",
        "description": "todo!"
    },
    {
        "name": "nightly ",
        "context": "Rust",
        "description": ""
    },
    {
        "name": "make nightly default",
        "context": "Rust",
        "description": "`rustup default nightly`"
    },
    {
        "name": "make stable rust default",
        "context": "Rust",
        "description": "`rustup default stable`"
    },
    {
        "name": "component",
        "context": "Leptos",
        "description": "A basic unit of composition and design in most frameworks. They are similar to HTML elements because they represent a section of the DOM with self-contained, self defined behavior"
    },
    {
        "name": "scope",
        "context": "Leptos",
        "description": "the entrypoint into the reactive system"
    },
    {
        "name": "create_signal",
        "context": "Leptos",
        "description": "The basic unit of reactive change and state management. The function returns a getter and setter.\n\n`let (count, set_count) = create_signal(cx, 0);`"
    },
    {
        "name": "ReadSignal",
        "context": "Leptos",
        "description": "The getter part of a signal allows for multiple types of gets, .get(), .set(), .with(), .update()"
    },
    {
        "name": "view",
        "context": "Leptos",
        "description": "The user interfaces are defined using JSX-like format via view. "
    },
    {
        "name": "event listener",
        "context": "javascript",
        "description": "todo!"
    }
]