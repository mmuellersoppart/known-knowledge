//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use super::sea_orm_active_enums::ExerciseableType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "exercise")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub idea_id: Uuid,
    pub exerciseable_id: Uuid,
    pub exerciseable_type: Option<ExerciseableType>,
    #[sea_orm(unique)]
    pub title: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub deleted_at: Option<DateTimeWithTimeZone>,
    pub usr_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::exerciseable::Entity",
        from = "Column::ExerciseableId",
        to = "super::exerciseable::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Exerciseable,
    #[sea_orm(
        belongs_to = "super::idea::Entity",
        from = "Column::IdeaId",
        to = "super::idea::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Idea,
    #[sea_orm(
        belongs_to = "super::usr::Entity",
        from = "Column::UsrId",
        to = "super::usr::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Usr,
}

impl Related<super::exerciseable::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Exerciseable.def()
    }
}

impl Related<super::idea::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Idea.def()
    }
}

impl Related<super::usr::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Usr.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
